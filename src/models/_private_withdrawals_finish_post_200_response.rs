/*
 * ExKoin API Documentation
 *
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PrivateWithdrawalsFinishPost200Response {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "currency")]
    pub currency: String,
    #[serde(rename = "amount")]
    pub amount: String,
    #[serde(rename = "user_fee")]
    pub user_fee: String,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "from_address")]
    pub from_address: String,
    #[serde(rename = "network")]
    pub network: String,
    #[serde(rename = "memo", skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
    #[serde(rename = "txid", skip_serializing_if = "Option::is_none")]
    pub txid: Option<String>,
    #[serde(rename = "status")]
    pub status: StatusEnum,
    #[serde(rename = "timestamp")]
    pub timestamp: f64,
}

impl PrivateWithdrawalsFinishPost200Response {
    pub fn new(id: String, currency: String, amount: String, user_fee: String, message: String, address: String, from_address: String, network: String, status: StatusEnum, timestamp: f64) -> PrivateWithdrawalsFinishPost200Response {
        PrivateWithdrawalsFinishPost200Response {
            id,
            currency,
            amount,
            user_fee,
            message,
            address,
            from_address,
            network,
            memo: None,
            txid: None,
            status,
            timestamp,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusEnum {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "processing")]
    Processing,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "cancelled")]
    Cancelled,
}

impl Default for StatusEnum {
    fn default() -> StatusEnum {
        Self::Pending
    }
}

