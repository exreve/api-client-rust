/*
 * ExKoin API Documentation
 *
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PrivateDepositsGet200ResponseInner {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "currency")]
    pub currency: String,
    #[serde(rename = "amount")]
    pub amount: String,
    #[serde(rename = "fee")]
    pub fee: String,
    #[serde(rename = "address_to", skip_serializing_if = "Option::is_none")]
    pub address_to: Option<String>,
    #[serde(rename = "address_from", skip_serializing_if = "Option::is_none")]
    pub address_from: Option<String>,
    #[serde(rename = "network")]
    pub network: String,
    #[serde(rename = "memo", skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
    #[serde(rename = "txid", skip_serializing_if = "Option::is_none")]
    pub txid: Option<String>,
    #[serde(rename = "block_height", skip_serializing_if = "Option::is_none")]
    pub block_height: Option<f64>,
    #[serde(rename = "status")]
    pub status: StatusEnum,
    #[serde(rename = "timestamp")]
    pub timestamp: f64,
    #[serde(rename = "confirmations")]
    pub confirmations: f64,
    #[serde(rename = "confirmations_required")]
    pub confirmations_required: f64,
}

impl PrivateDepositsGet200ResponseInner {
    pub fn new(id: String, currency: String, amount: String, fee: String, network: String, status: StatusEnum, timestamp: f64, confirmations: f64, confirmations_required: f64) -> PrivateDepositsGet200ResponseInner {
        PrivateDepositsGet200ResponseInner {
            id,
            currency,
            amount,
            fee,
            address_to: None,
            address_from: None,
            network,
            memo: None,
            txid: None,
            block_height: None,
            status,
            timestamp,
            confirmations,
            confirmations_required,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusEnum {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for StatusEnum {
    fn default() -> StatusEnum {
        Self::Completed
    }
}

