/*
 * ExKoin API Documentation
 *
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PrivateTradesGet200ResponseInner {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "order_id")]
    pub order_id: String,
    #[serde(rename = "client_order_id", skip_serializing_if = "Option::is_none")]
    pub client_order_id: Option<String>,
    #[serde(rename = "symbol")]
    pub symbol: String,
    #[serde(rename = "type")]
    pub r#type: TypeEnum,
    #[serde(rename = "side")]
    pub side: SideEnum,
    #[serde(rename = "taker_or_maker")]
    pub taker_or_maker: TakerOrMakerEnum,
    #[serde(rename = "price")]
    pub price: String,
    #[serde(rename = "amount")]
    pub amount: String,
    #[serde(rename = "cost")]
    pub cost: String,
    #[serde(rename = "fee")]
    pub fee: Box<models::PrivateOrdersGet200ResponseInnerFee>,
    #[serde(rename = "created_at")]
    pub created_at: f64,
}

impl PrivateTradesGet200ResponseInner {
    pub fn new(id: String, order_id: String, symbol: String, r#type: TypeEnum, side: SideEnum, taker_or_maker: TakerOrMakerEnum, price: String, amount: String, cost: String, fee: models::PrivateOrdersGet200ResponseInnerFee, created_at: f64) -> PrivateTradesGet200ResponseInner {
        PrivateTradesGet200ResponseInner {
            id,
            order_id,
            client_order_id: None,
            symbol,
            r#type,
            side,
            taker_or_maker,
            price,
            amount,
            cost,
            fee: Box::new(fee),
            created_at,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeEnum {
    #[serde(rename = "market")]
    Market,
    #[serde(rename = "limit")]
    Limit,
}

impl Default for TypeEnum {
    fn default() -> TypeEnum {
        Self::Market
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SideEnum {
    #[serde(rename = "buy")]
    Buy,
    #[serde(rename = "sell")]
    Sell,
}

impl Default for SideEnum {
    fn default() -> SideEnum {
        Self::Buy
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TakerOrMakerEnum {
    #[serde(rename = "taker")]
    Taker,
    #[serde(rename = "maker")]
    Maker,
}

impl Default for TakerOrMakerEnum {
    fn default() -> TakerOrMakerEnum {
        Self::Taker
    }
}

