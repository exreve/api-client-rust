/*
 * ExKoin API Documentation
 *
 * API documentation for ExKoin Crypto exchange
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PrivateWithdrawalsDetailGet200Response {
    #[serde(rename = "currency")]
    pub currency: Box<models::PublicCurrenciesGet200ResponseInner>,
    #[serde(rename = "network")]
    pub network: Box<models::PublicNetworksGet200ResponseInner>,
    #[serde(rename = "balance")]
    pub balance: String,
    #[serde(rename = "fee_usd")]
    pub fee_usd: String,
    #[serde(rename = "fee_in_currency")]
    pub fee_in_currency: String,
    #[serde(rename = "max_withdraw_exchange")]
    pub max_withdraw_exchange: String,
    #[serde(rename = "available_hot")]
    pub available_hot: std::collections::HashMap<String, String>,
    #[serde(rename = "available_hot_and_cold")]
    pub available_hot_and_cold: std::collections::HashMap<String, String>,
    #[serde(rename = "address_regex")]
    pub address_regex: String,
    #[serde(rename = "min_withdraw_amount")]
    pub min_withdraw_amount: String,
    #[serde(rename = "is_memo_required", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_memo_required: Option<Option<serde_json::Value>>,
}

impl PrivateWithdrawalsDetailGet200Response {
    pub fn new(currency: models::PublicCurrenciesGet200ResponseInner, network: models::PublicNetworksGet200ResponseInner, balance: String, fee_usd: String, fee_in_currency: String, max_withdraw_exchange: String, available_hot: std::collections::HashMap<String, String>, available_hot_and_cold: std::collections::HashMap<String, String>, address_regex: String, min_withdraw_amount: String) -> PrivateWithdrawalsDetailGet200Response {
        PrivateWithdrawalsDetailGet200Response {
            currency: Box::new(currency),
            network: Box::new(network),
            balance,
            fee_usd,
            fee_in_currency,
            max_withdraw_exchange,
            available_hot,
            available_hot_and_cold,
            address_regex,
            min_withdraw_amount,
            is_memo_required: None,
        }
    }
}

